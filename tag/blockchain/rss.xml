<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>slowsortblog.github.io/</title>
   
   <link></link>
   <description>Superficial Thoughts on Blockchains and Philosophy.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Reputation-based tokenomics Why and How?</title>
	  <link>//reputation-tokenomics</link>
	  <author></author>
	  <pubDate>2022-09-28T10:18:00+00:00</pubDate>
	  <guid>//reputation-tokenomics</guid>
	  <description><![CDATA[
	     <p><strong>TLDR; Key points</strong>:</p>

<ul>
  <li>Reputation-based tokenomics are promising alternatives to naive tokenomics</li>
  <li>Reputation does not require a strong, persistent identity</li>
  <li>Obsession with Sybil resistance obscures that often Sybil tolerance is good enough</li>
</ul>

<h2 id="the-new-kid-in-town-reputation-based-tokenomics">The new kid in town: reputation-based tokenomics</h2>

<p>Reputation has been getting a lot of interest in the blockchain space recently. We do not mean the reputation of crypto-influencers and project founders who dump their bags on unsuspecting community members (although undeniably fascinating topic), but reputation as proper research and engineering direction. There is certainly a lot of experimentation with different conceptual and practical reputation solutions: non-transferable tokens as a form of reputation (Soulbound tokens), DAO toolboxes for the evaluation of members‚Äô contributions (Sourcecred, Coordinape), reputation to penalize censorship and other misbehavior (relays in MEV-boost), and many more in the development.</p>

<p>This increase in interest is also mixed with other assumptions and problems which pop up in discussions on reputation in the blockchain context. The first one is the topic of identity, including various kinds of identity management solutions. The second prominent topic is a persistent concern regarding ‚ÄòSybils.‚Äô There is also a good chance that you have read or heard more than once that: we need an ‚Äòidentity layer‚Äô in blockchains to solve the ‚Äòproblem of Sybils.‚Äô These are interesting questions, and even more intriguing is to consider if all these things are parts of the same big problem. It might be helpful to try and untangle reputation from the surrounding issue first.</p>

<p>So why this resurgence of interest in reputation mechanisms now? Probably, one of the strongest motivating factors at the moment is a growing collective realization that we have run into a hard wall of limitations for naive tokenomics. No matter how complicated the design of the token distribution mechanism is, as long as we limit the design toolbox to monetary incentives, there are always the same problems.</p>

<p>For one, decentralized governance based on freely tradable tokens inevitably oscillates between plutocracy and ochlocracy. Or, in blockchain terms, ‚Äòüêã whale economy‚Äô and ‚Äòü¶ê shrimp economy.‚Äô This means that either we have to contend with a few Whales (large token holders) dictating their will or rely on the wisdom of a crowd of smaller token holders, who are often unfortunately too easily impressionable (<a href="https://www.coindesk.com/tech/2022/02/01/wonderland-founder-im-here-to-fix-this-and-make-it-all-back/">Wonderland story</a>).</p>

<p>But generally speaking, the limitation of monetary incentive mechanisms stems from the fact that they do not allow for the easy alignment of incentives. Mercenary capital does not care for the survival and sustainability of the project but only for its own survival. And yes, the greed of the markets can do wonders, but it can also easily backfire, as it keeps reliably happening with algorithmic stablecoins. Finding people who would like to contribute because they share the goals of the project and finding a way to acknowledge the merits of their contributions arguably is a more sustainable approach for collaboration in the long term.</p>

<p>Against this background, reputation has an intuitive appeal of different social mechanics that are not based on simple profit-seeking. Something that can capture those kinds of participation that are based on merits and fairness. Something that we associate with cooperation, peer recognition, and social capital. Reputation, in that sense, could be considered a different type of incentive mechanism, attracting and rewarding with social recognition those who do care about specific goals and values of the project. It may seem a bit utopian, but we have some good examples of open-software projects working this way, early Wikipedia, early Linux, and even early Bitcoin.</p>

<h2 id="reputation-system-is-a-minefield">Reputation system is a minefield</h2>

<p>Of course, the downside of this intuitive appeal is that the chase for utopian cooperation can obscure some ugly sides of reputation mechanisms. In some cases, it can just be a lazy way to deal with the problem, i.e., we have misbehaving nodes in a system, so let‚Äôs slap on identity and reputation to punish them. Treating reputation like a magic box that will solve all problems leads to hilarious and deeply disturbing results. For example, ‚Äòdecentralized‚Äô derivatives exchange asks users for biometric verification that will be ‚Äòsafely stored with our trusted partner.‚Äô This one is more on the hilarious side, for sure. But then we also see some ‚Äòbiometric identification hardware‚Äô solutions to prove you are a real human, purportedly developed to fight Sybil attacks in ‚Äòopen permissionless‚Äô systems, that lean more towards a disturbing side.</p>

<p>Speaking of which, Sybil attacks partially explain the interest in reputation mechanisms. To be fair, Sybils are a serious problem in blockchain or any other decentralized system. However, it is not always clear if we want a reputation to prevent Sybils, or do we want to prevent Sybil attacks in order to build a reliable reputation mechanism. The answer is: it can be both. There is no single ‚ÄòSybil attack‚Äô but rather a general approach of creating fake participants - Sybils - in order to exploit or disrupt the system (see layers).</p>

<p>Apart from locking the system to a limited number of known participants, it is indeed quite hard to solve this problem completely. The alternative is to bound the behavior of system participants by the rules of protocol, e.g., using some form of proof or accounting for ‚Äògood‚Äô behavior. While we are on the topic of ‚Äògood contributions‚Äô, it is helpful to keep in mind that ‚Äògood‚Äô and ‚Äòbad‚Äô terminology should not be taken too seriously. First of all, this is an abstraction that refers to the questions if participants behave in accordance with protocol specifications. Whether these specifications reflect good behavior in a broad sense is often out of scope.</p>

<p>Secondly, social appraisal and reputation are very, very context-specific and not always can be grasped by the simple formalized metrics. While it might be tempting to translate metrics that work in some context into another contribution context, they often end up being completely divorced from reality. This is not about tradeoffs but about the poor practice of applying wrong tools to wrong problems (also, this is how you get the monstrosity of social-credit scores). Finally, different contexts can provide radically different interpretations for the same contribution. Contributor to financial privacy software is worthy of high moral praise, yet sadly they can be painted by malicious entities as money launderer if they have enough power to frame these contributions in a different context. So there are very few (if any) good reasons to propose universal on-chain identity and reputation (self-cite).</p>

<p>Nevertheless, reputation mechanisms can be quite useful in a specific, well-defined context. Reputation mechanisms can be used to acknowledge the merits of contributions and even organize the distribution of resources on the basis of merits. And suppose we want to have some guarantees against adversarial misuse of reputation. In that case, it should be done without centralized reputation aggregators and without strong persistent identity, such as on-chain identity. This may seem counter-intuitive at first, but a functioning reputation mechanism, in fact, does not need a strong or persistent identity mechanism. Nor do we need a strong identity to address the problem of Sybil attacks in a satisfactory manner. The breakthrough significance of Nakamoto consensus, by the way, is that it side-steps these problems so elegantly. It does not matter who you are, anyone can join and update the ledger, but the damage that participants can do is bounded. So can we have a decentralized and permissionless reputation in the same spirit?</p>

<h2 id="decentralized-reputation">Decentralized Reputation</h2>

<p>Thanks to 30 years of P2P research, we know all mechanisms to tackle Sybils, and misbehaving participants in decentralized networks have certain tradeoffs, going beyond privacy problems. These tradeoffs can be presented as a trilemma (everybody loves them, right?) or a design space where the choice of instruments limits the available space of a triangle. It is a viable representation given that most well-known reputation tools broadly fall into three categories: cryptographic proofs, trusted oracles, and social feedback.</p>

<p>As a general concept, cryptographic proof solutions were proposed as early as the <a href="https://chaum.com/wp-content/uploads/2022/02/techrep.pdf">1980s</a>). Bounding the behavior of system participants through cryptographic proofs is a compelling concept but, unfortunately, not very generalizable when we try to use it as proof of ‚Äògood contributions‚Äô.</p>

<p>For instance, consider a DAO where all contributions of participants and cryptographically proven and independently verifiable for anyone; it starts looking a bit strange. For one proving in a trustless way that a contribution was made is very hard. This works only with a narrow type of resource contributions, such as proof of storage, proof of computing, proof of bandwidth and etc. The second tricky issue is that there is not always an easy way to generate, share, and agree on the proofs in a trustless way globally.</p>

<p>Thus, to ensure that we account for all contributions of DAO participants in such a fashion, we need some very weird solutions. E.g., some key-logging software on a machine of a DAO participant that record all your contributions, signs them cryptographically, and uploads them to a public ledger. There are, of course, other ways to account for the ‚Äògood‚Äô and ‚Äòbad‚Äô behavior in a system that does not require such cumbersome logic.</p>

<p>The use of trusted oracles also has some serious limitations. If we introduce trusted oracles to account for participants‚Äô behavior, this puts a hard limit on how permissionless the system can be. And if we try to decentralize oracles, we end up either with prediction markets, or we move in the direction of the third type of mechanism: social networks feedback.</p>

<p>Social feedback or social network feedback are mechanisms where peers evaluate each others‚Äô contributions and exchange this information as a P2P network. They got initially popular with the success of social networks in Web2, and maybe also got mixed up with problems inherent to social media networks. However, social feedback mechanisms have some peculiar properties that make them worthy of a second look. These are very flexible methods that can be adapted to different types of contributions, as peers can determine the semantics of feedback themselves. DAO participants, for example, can endorse their peers for any kind of contribution. Secondly, it can be as decentralized and permissionless as we want. This information can be shared and aggregated between participants in the P2P network.</p>

<h2 id="sybil-tolerance-to-the-rescue">Sybil-Tolerance to the rescue</h2>

<p>Of course, this leaves us with a remaining trade-off: the problem of Sybil resistance. One can create multiple accounts to boost one‚Äôs reputation or boost the reputation of one‚Äôs Sybils. However, one crucial point we need to consider here. Full Sybil-resistance is not something that we are really after. To think about it, Sybils are not necessarily bots. It is perfectly possible to hire real humans to act as your Sybils. This, by the way, again highlights the questionable purpose of surveillance-style ‚Äòproof of real human solutions. Or consider that it is always possible to organize off-channel collusion between different participants to achieve the same goals as Sybil attack could achieve. It is a very strong and plausible conjecture then that fully guaranteed Sybil-resistance is neither possible nor necessary in real-life decentralized systems.</p>

<p>What we care about in most cases, though, is not the absence of Sybils but that attacks of these type do not break or undermine the functionality of a system. Say if the reputation mechanism is used to distribute rewards, Sybil attack will be bounded so that the attacker can get some threshold-bounds resources. This brings us to the question of Sybil-tolerance: Can our system tolerate these types of attacks? And it turns out that we can indeed design a social feedback mechanism that is Sybil-tolerant.<br />
Social feedback mechanisms intuitively translate well into collaboration schemas, with resource distribution based on contributions‚Äô merits. Many social arrangements have been made in the same way. So we can try to translate these principles into the context of DAO applications as well. E.g., peers can provide feedback to each other resulting in a reputation ranking that can be used to distribute rewards from DAO treasury proportionally to accrued reputation.</p>

<p>However, naive approaches to account for reputation in P2P networks would not do here. For example, graph measurements based on simple global centralities, such as vertex degrees, are easily manipulable. In fact, even complex global reputation mechanisms, such as PageRank, are not Sybil tolerant. Such vulnerability trivially follows from the fact that any node in the network can gain a reputation by adding any new edge. Thus, the attacker can unboundedly gain benefits from the Sybil attack without the need to create any attack edge.</p>

<p>We refer the curious reader to learn more technical details on how to make Sybil-tolerant reputation from our <a href="http://arxiv.org/abs/2207.09950">paper</a>.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Superficial thoughts on blockchains and philosophy</title>
	  <link>//genesis-blog</link>
	  <author></author>
	  <pubDate>2022-09-26T10:18:00+00:00</pubDate>
	  <guid>//genesis-blog</guid>
	  <description><![CDATA[
	     <p>Sometimes one can hear at conferences or read online that philosophy is needed in the blockchain space. Most of the time, this is a well-meaning suggestion from people deeply appreciative of the multifaceted (and at times very peculiar) nature of blockchain engineering and research. I have some reservations about whether this suggestion should be presented in such a strong modality. After all, this is a very open question if the blockchain field <em>needs</em> philosophy. In fact, many philosophers themselves, from time to time, express doubts about whether anyone really <em>needs</em> philosophy. At the same time, it feels somewhat disheartening to just ignore these well-meaning suggestions. Perhaps we can ask a different question: ‚ÄòCan philosophy be useful (maybe even a bit) when we build, design, and use blockchain-based applications?‚Äô. And intuitively, it seems that it just might be.</p>

<p>To untangle these intuitions into more specific suggestions, we can try to identify some parallels between classes of problems or areas of interest common to blockchain and philosophy people. Well, for one, both of these fields are deeply permissionless both in spirit and nature. Sure, we have a venerable tradition of academic research relevant to both of these fields, with associated formal and institutional frameworks. And yet there is no single entity or institution in the world with the definite central authority to certify something as ‚Äòtrue blockchain‚Äô or ‚Äòtrue philosophy‚Äô.</p>

<p>What we call philosophy historically is a product of consensus between validating parties. Anyone can create their own philosophy, and if enough people are incentivized to maintain and participate, it will achieve liveness and decent adoption. Now the downside of that is, of course, an abundance of completely inconsistent and unworkable philosophies that nevertheless found a significant amount of confused participants throughout history. I will leave it to the reader to find parallels with the blockchain world, but there are plenty. Yet, this permissionless spirit is also a source of endless creativity and ingenuity. Not unlike impactful philosophers of the past, blockchain engineers keep inventing and re-inventing conceptual worlds, design new (sometimes so questionable they would make Plato proud) models of society, and with immense persistence try to solve problems judged to be unsolvable or unimportant by others.</p>

<p>Thus, there is no surprise that many engineers, researchers, and inventors in blockchain space find themselves dabbling with issues that many philosophers have dealt with (with varying degrees of success).</p>

<h2 id="levels-of-abstraction">Levels of abstraction</h2>

<p>Coders, engineers, and computer scientists love levels of abstraction and layers. To borrow an expression from one of the lectureres from the introductory class to CS students: ‚ÄúWe have to use layers; otherwise, our puny human brain would not be able to handle the complexity.‚Äù Indeed, separating the system under question into different layers is quite a convenient way to grasp different components, functions, or problems in a more meaningful and focused way. OSI and TCP/IP models are well-known examples of conceptual models used to address complexity.</p>

<p>Layering models are no less popular in the context of a blockchain system. At the moment of the writing of this blog, arguments on ‚Äòlayer three‚Äô scalability solutions sound practically mainstream. It is common also to hear expressions like ‚Äòthis is a governance layer problem‚Äô or ‚Äòthis is a social layer problem.‚Äô So it is safe to say that layer thinking is also quite popular in the blockchain space. What is less clear is whether such thinking does help to address complexity or creates more of it. The problem here is that decentralized systems like actual blockchains (some insist on calling them ‚Äòpermissionless blockchains‚Äô for whatever reason) generate emergent properties and emerging complexity. Even a seemingly simple idea of DAO (we just collaborate online) is a compound complexity on top of a Defi complexity, on top of a Smart contract complexity, on top of a consensus protocol complexity, on top of network complexity. This also means that with the increase of scale and application, layering model which once was useful becomes either reductionist or naive or both.</p>

<p>Case in point: the standard practice of dumping down all non-technical aspects into one ‚Äòsocial layer‚Äô. This may sound like a convenient way to deal with everything: a) not important right now; b) other people‚Äôs problem; c) will resolve itself after the bull market resumes. However, one could argue that avoiding reductionist models is not just an exercise in intellectual honesty but also very pragmatic. Simplifications tend to ignore hidden assumptions and pile up complexity at one layer, e.g. the application layer. For example, trying to address Sybil attacks at the application layer often leads to creating new and inventive ways to degrade the privacy of system users, rather than addressing Sybils at multiple layers.</p>

<p>To avoid simplification, we could use a more rational approach to the modeling of systems. For instance, we could try to consider different levels of abstraction for a blockchain system not as a technical system with a social layer but rather as a non-trivial socio-technical system. This means that we can consider decomposition into multiple layers where the functioning of each layer and system as a whole depends on the specific behavior of human participants at each layer. Which means that we should carefully consider an appropriate level of abstraction not only for the model as a whole but also for each layer.</p>

<p>To avoid simplification, we could use a more rational approach to the modelling of systems. For instance, we could try to consider different level of abstraction for a blockchain system not as a technical system with a social layer but rather as a non-trivial socio-technical system. This means that the functioning of each layer and system as a whole critically depends on the specific behavior of human participants at each layer. If we use traditional layering, say borrowed from networking, this gives us only a partial picture. But if we want to analyze blockchain as a socio-technical system, we maybe need to consider the influence of the ‚Äòsocio‚Äô part on different layers and how these layers are related in terms of mutual influence and dependency. For instance, we can consider layers in terms of rules for blockchain protocol:</p>

<ul>
  <li><strong>Sustainability and existence</strong> (system of incentives and infrastructure). Sustains the whole system of rules;</li>
  <li><strong>Meta-rules</strong> (rules for the EIP proposals and acceptance), rules for the development of codebase, rules for the acceptance of pull requests (loose social consensus);</li>
  <li><strong>Rules creation</strong> (Developer meetups, forums, etc.), actual EIPs, implementations, actual pull requests;</li>
  <li><strong>Application of rules</strong> (Miners), validators;</li>
  <li><strong>Follow the rules</strong> (Clients, smart contracts).</li>
</ul>

<p>This type of layering can be helpful to consider when we want to highlight dependencies regarding different participants for instance. Or try to see whether some participants in the system are centralized trusted parties, or what kind of non-technical failures we should expect. But to talk about these and other issues we also need other tools which brings us to the next topic of using good conceptual frameworks.</p>

<h2 id="conceptual-analysis">Conceptual analysis</h2>

<p>Square meters of doodles on a whiteboard for a few days is what it takes to come up with just one reasonably clear model of a system. Describing it coherently and clearly to other people is yet another task. The other problem also is that there is very little agreement on conceptual terminology: is it distributed? Is it decentralized? Which one is which? Well, philosophy is all about conceptual analysis and complex mental abstractions, and yes, not all of it always make sense. Still, a good deal of philosophy can build reasonably coherent and meaningful conceptual models.</p>

<p>One issue which could benefit from such scrutiny is an abundance of interdisciplinary terminology in the blockchain space. As blockchains are not-trivial socio-technical systems, little surprise that concepts from humanities and engineering are often mixed together and conflated. The word ‚Äòtrust‚Äô is easily one of the most problematic examples of that. In itself, it is not a problem if people want to talk about different aspects of such a rich phenomenon. But it may become a problem when we start arguing about different things, as if this is one thing. Not to mention freshly-baked blockchain critics appearing each year with the same argument: ‚ÄòBut no, you still have to trust developers, no Blockchain is not trustless. Check and mate blockchain people!‚Äô.The latter argument is, of course, harmless and irrelevant as it fails to grasp specific meaning of ‚Äòtrust‚Äô here. I mean, one can criticize gossip protocol designers that their products fail to spread interesting and fresh gossip, but why should they care. Still, generally speaking, it is helpful to strive for conceptual clarity when engineering complex systems.</p>

<p>One way to look at this problem through the prism of a conceptual analysis is to consider ‚ÄòTrust‚Äô as a peculiar example of so-called conceptual slippage. This happens when the concept is borrowed from a different field (social studies/game theory) and stuffed with a different meaning (in P2P) or reduced to a very specific meaning (in security). Not to mention that many subfields in computer science also tend to have different conceptions of trust. And when the field (distributed systems) expands to incorporate new contexts (blockchains with human participants), we still keep applying modified/reduced concepts in a broader context with often confusing results. This means that we need to enrich the concept again to make it appropriate for this extended context.</p>

<p>But of course, there are many more applications for this type of scrutiny. ‚ÄòConsensus‚Äô is another concept that seems to bring a lot of confusion between technical and social interpretations, not only for outsiders but also for some blockchain projects. I.e., when project developers tend to forget that having a running consensus protocol does not address the issues that require social consensus. This is an honest mistake since we still do not completely understand the complexity of layers for blockchain systems.</p>

<p>And then, of course, there is plenty of overlap and mixture between different terminology. For instance the lack of agreements between industry people and computer scientists on the difference between distributed and decentralized. Academics tend to distinguish between distributed centralized systems (cloud) and decentralized distributed systems (P2P); industry devs sometimes use distributed in the sense of ‚Äòsuper decentralized .‚Äô Speaking of which, the concept of decentralization is not only open to various interpretations in different contexts, but it is also what is called an essentially contested concept. This happens when people have a vested interest to insist on a particular definition, maybe because it fits the system they are building or for other reasons. Maybe some of these issues could be properly addressed with some help from a good old conceptual analysis and a dash of scepticism.</p>

<h2 id="scepticism">Scepticism</h2>

<blockquote>
  <p>Philosophy is very good as skepticism: <em>Do we really know things as they are, are we brains in a vat? What if zoo authorities painted all horses in the local zoo into zebras.</em></p>
</blockquote>

<p>And yes, this is a real citation from a respectable philosopher and not a citation of some twitter conspiracy theory. The inevitable consequence of an ever-present skepticism is that philosophers (at least those that are honest with themselves) tend to simultaneously entertain strong beliefs in the correctness of their arguments with constant doubts about the coherence and soundness of these mental constructions.</p>

<p>Would such skepticism do any good in the blockchain space? There is a lot of circumstantial evidence that it would indeed. It certainly does not hurt to maintain a constant healthy dose of skepticism while engaging in blockchain experimentation, and we are not only talking about ‚Äòfarm yields‚Äô that sound too good to be true, or ‚Äòsupercycle‚Äô promises. Engineering and system modeling for blockchain solutions also benefit from a healthy dose of skepticism. For one, there are a lot of hidden assumptions in blockchain engineering that we tend to ignore or accept uncritically. It is safe to say that a good deal of assumptions on economic incentives or tokenomics falls in the category of hidden and implicit assumptions. Why your Proof-of-history chain has stopped 6 times in one month? Can your algorithmic coin maintain the peg? MEV is not a big deal‚Ä¶ the list goes on. Does this mean that we should not try new things? No, of course not, but the point is that it would be helpful to be honest with our assumptions, and try to distinguish between designs and system components that we understand relatively well and those parts that we do not understand yet.</p>

<p>Another cool part about skepticism is that it can help to distinguish between relevant and irrelevant critical arguments and highlight constructive criticism. For instance, in order to evaluate these arguments, we can consider whether these arguments are using a valid conceptual framework and level of abstraction that corresponds to the subject of criticism. E.g., Saying that smart contracts do not have the same qualities as legal contracts and thus should be done differently is not relevant or constructive criticism. On the other hand, saying that smart contract development driven primarily by gas-optimization strategies does not align well with good software engineering practices is a constructive criticism.</p>

<p>Finally, healthy skepticism is a must-have in a space dominated by information asymmetries. This, in other words, means that the distribution of expert and accurate knowledge (sometimes referred to as ‚Äòalfa‚Äô) is very, very, very uneven. One can say that blockchain space is not just characterized but defined by information asymmetries both of intentional and unintentional nature. Asymmetries are unfortunately incentivized because information advantage is often easily monetizable in this space. Then, there are also objective asymmetries rooted in the complexity of blockchain systems that require some very particular expert knowledge like cryptography of distributed systems engineering. And, of course, the constantly increasing number of new projects and more specialized solutions makes it quite challenging to navigate the space for anybody, including blockchain researchers. Here again, correct terminology and the correct level of abstraction can do wonders. Not to mention a good habit of verifying as much as possible in a true spirit of healthy skepticism, which is one of the original values of blockchain space if you think about it.</p>

<h2 id="evaluation">Evaluation</h2>

<p>Finally, even after we have a good understanding of problems and solutions at different levels and from different angles, there is always this small question of which solution we actually choose and why. Even when we can seemingly agree (within the group of interested participants) with something, for instance, that decentralization is good, it opens up another bottomless jar of conflicting opinions. How to measure it? What is the threshold for sufficient decentralization?</p>

<p>And it gets worse once we get to the point of considering different trade-offs, often without even talking about them explicitly. For example, often, there is the implicit assumption that it is OK to sacrifice a bit of decentralization for the sake of, say, the performance of ease of bootstrap at some stage of development. Which is interestingly enough sometimes turns out to be not true at all; some protocols sacrifice decentralization without gaining any wins in performance (Gromit reference).</p>

<p>Coincidentally, one of the oldest subfields of philosophy deals with normative reasoning and normative judgments, that is, trying to come up with good arguments for why something is better than other and even arguments on what ‚Äòbetter‚Äô even means. This subfield is a moral philosophy, and contrary to popular opinion, this is not an exercise in dispatching condescending judgments about the sins of other people. In fact, some of the moral philosophy does the opposite, just search for the ‚Äòstrong moral relativism‚Äô. Thus, even if we hypothetically do not care about the moral impact of blockchain applications (though I sincerely hope that more than a few people do), normative reasoning can help make relevant judgments on design choices.</p>

<p>We can borrow a set of different approaches for normative reasoning: - formulating values (in a broad sense), choosing or finding a way to measure them, and then trying to compare them. And the latter can be a proper challenge. For example, what are the values or criteria of a working blockchain? Liveness, throughput, availability, fault-tolerance, censorship-resistance? Some are theoretical, abstract measurements of distributed systems, and some are more vague and loaded metrics. Even if we focus on the first three measurements, we need to ensure that when comparing the metrics and associated trade-offs, we use the same framework of evaluation, say a unified method of measurements context (light transactions vs read/write heavy smart contracts), environment context (p2p network vs cloud settings).</p>

<p>Imagine multilayer systems where we have to consider social components and associated values. Here, it is quite easy to run into a situation where we try to compare values and metrics that are simply incommensurable.  On a high level, we do not even know what is a good or desirable threshold of efficiency for a consensus protocol since we do not have agreed and accurate metrics of such properties as decentralization and censorship resistance is.</p>

<p>Maybe ee may measure them in the future and confidently say that some other types of consensus protocols deliver exactly the same properties as the Nakamoto consensus (for some specific use case) while say consuming less energy. But at the moment, we probably can not even start comparing (and no, Bitcoin and Ethereum are two different things used for different things). Luckily, resolving normative conflicts, tackling incommensurability of values, and constructing reasonable arguments against the background of a complete conceptual mess, are well-known activities in philosophy. Maybe some of the available methods and approaches could also be used in the blockchain space.</p>

<h2 id="to-sum-up">To sum up‚Ä¶.</h2>

<p>Maybe some philosophy could be used in blockchain research and engineering as well. Inspired by this thought, this blog will keep presenting and elaborating on some of these and other intuitions on blockchains and philosophy. All presented thoughts are superficial conjectures at best, and you should not expect profound insights from these posts. However, the blog‚Äôs authors hope that the blockchain research and development field is still at that level of maturity when naive ideas can still be somewhat valuable; after all, ‚Äúwe are still early‚Äù‚Ñ¢.</p>


	  ]]></description>
	</item>


</channel>
</rss>
